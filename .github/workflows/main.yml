name: test

on: workflow_dispatch

env:
  ENDPOINT: frontend/o2switch/o2switch-ssh-whitelist/index.live.php

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Encoding Password in URI
        id: encoded_password
        run: |
          PASSWORD=$(printf %s ${{ secrets.SSH_PASSWORD }} | jq -sRr @uri )
          echo "PASSWORD=$PASSWORD" >> $GITHUB_OUTPUT

      - name: Getting Runner IP
        id: runner_ip
        run: |
          IP=$(curl https://api.ipify.org)
          echo "Runner IP : $IP"
          echo "IP=$IP" >> $GITHUB_OUTPUT

      - name: Getting Current Whitelist
        id: current_whitelist
        run: |
          # Getting Current Whitelist
          echo "Actual whitelist : "
          
          WHITELIST=$(curl -sX GET "https://${{ secrets.SSH_USER }}:${{ steps.encoded_password.outputs.PASSWORD }}@${{ secrets.SSH_HOST }}:2083/${{ env.ENDPOINT }}?r=list")
          echo "$WHITELIST" | jq -c '.data.list[]'
          echo "WHITELIST=$WHITELIST" >> $GITHUB_OUTPUT

      - name: Adding Runner IP to Whitelist
        run: |
          # Adding Runner IP to Whitelist
          IP_IS_WHITELISTED=$(echo '${{ steps.current_whitelist.outputs.WHITELIST }}' | jq '.data.list | any(.address == "${{ steps.runner_ip.outputs.IP }}" )')
          
          if [[ "$IP_IS_WHITELISTED" == "true" ]]; then
          
          echo "Runner IP already whitelisted"
          
          exit 1;
          
          fi
          
          LIST_LENGTH=$(echo '${{ steps.current_whitelist.outputs.WHITELIST }}' | jq '.data.list | length')
          
          if [[ "$LIST_LENGTH" -eq "10" ]]; then 
          
          echo "Whitelist full"
          echo -e
          
          IP_TO_DELETE=$(echo '${{ steps.current_whitelist.outputs.WHITELIST }}' | jq -r '.data.list[8].address') 
          
          echo "Deleting last IP from whitelist : $IP_TO_DELETE (in & out)"
          
          curl -sX GET "https://${{ secrets.SSH_USER }}:${{ steps.encoded_password.outputs.PASSWORD }}@${{ secrets.SSH_HOST }}:2083/${{ env.ENDPOINT }}?r=remove&address=$IP_TO_DELETE&direction=in&port=22" | jq
          sleep 1
          curl -sX GET "https://${{ secrets.SSH_USER }}:${{ steps.encoded_password.outputs.PASSWORD }}@${{ secrets.SSH_HOST }}:2083/${{ env.ENDPOINT }}?r=remove&address=$IP_TO_DELETE&direction=out&port=22" | jq
          sleep 1
          
          echo "IP deleted from whitelist";
          
          fi
          
          echo -e
          echo "Adding runner IP to whitelist : ${{ steps.runner_ip.outputs.IP }}"
          curl -sX POST -d 'whitelist[address]="${{ steps.runner_ip.outputs.IP }}"' -d 'whitelist[port]=22' "https://${{ secrets.SSH_USER }}:${{ steps.encoded_password.outputs.PASSWORD }}@${{ secrets.SSH_HOST }}:2083/${{ env.ENDPOINT }}?r=add" | jq

      - name: test
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}

      - name: test2
        uses: garygrossgarten/github-action-ssh@release
        with:
          command: ls -a
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          privateKey: ${{ secrets.SSH_KEY }}
